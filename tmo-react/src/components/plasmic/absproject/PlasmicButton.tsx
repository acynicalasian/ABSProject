// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8FchSsiiZWHae7vc9L6pbp
// Component: cP0qKdJ6rFzw

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseButton } from "@plasmicpkgs/react-aria/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss

import "./plasmic.css"; // plasmic-import: 8FchSsiiZWHae7vc9L6pbp/projectcss
import "./PlasmicButton.css"; // plasmic-import: cP0qKdJ6rFzw/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: 4gPtpoC8TFBx/icon
import ChevronDown2Icon from "./icons/PlasmicIcon__ChevronDown2"; // plasmic-import: NQtc9CZNfqM_/icon

createPlasmicElementProxy;

export type PlasmicButton__VariantMembers = {
  color: "neutral" | "muted" | "success" | "warning" | "errorDestructive";
  type: "soft" | "bordered";
  size: "extraSmall" | "small" | "large" | "extraLarge";
  iconStart: "iconStart";
  iconEnd: "iconEnd";
  roundedFull: "roundedFull";
  flatSide: "top" | "right" | "bottom" | "left";
};
export type PlasmicButton__VariantsArgs = {
  color?: SingleChoiceArg<
    "neutral" | "muted" | "success" | "warning" | "errorDestructive"
  >;
  type?: SingleChoiceArg<"soft" | "bordered">;
  size?: SingleChoiceArg<"extraSmall" | "small" | "large" | "extraLarge">;
  iconStart?: SingleBooleanChoiceArg<"iconStart">;
  iconEnd?: SingleBooleanChoiceArg<"iconEnd">;
  roundedFull?: SingleBooleanChoiceArg<"roundedFull">;
  flatSide?: MultiChoiceArg<"top" | "right" | "bottom" | "left">;
};
type VariantPropType = keyof PlasmicButton__VariantsArgs;
export const PlasmicButton__VariantProps = new Array<VariantPropType>(
  "color",
  "type",
  "size",
  "iconStart",
  "iconEnd",
  "roundedFull",
  "flatSide"
);

export type PlasmicButton__ArgsType = {
  disabled?: boolean;
  submitsForm?: boolean;
  resetsForm?: boolean;
  ariaLabel?: string;
  onClick?: (event: any) => void;
  linkTo?: string;
  openLinkInNewTab?: boolean;
  start?: React.ReactNode;
  label?: React.ReactNode;
  end?: React.ReactNode;
};
type ArgPropType = keyof PlasmicButton__ArgsType;
export const PlasmicButton__ArgProps = new Array<ArgPropType>(
  "disabled",
  "submitsForm",
  "resetsForm",
  "ariaLabel",
  "onClick",
  "linkTo",
  "openLinkInNewTab",
  "start",
  "label",
  "end"
);

export type PlasmicButton__OverridesType = {
  root?: Flex__<typeof BaseButton>;
  softBackground?: Flex__<"div">;
  border?: Flex__<"div">;
  interactionEffect?: Flex__<"div">;
};

export interface DefaultButtonProps {
  disabled?: boolean;
  submitsForm?: boolean;
  resetsForm?: boolean;
  ariaLabel?: string;
  onClick?: (event: any) => void;
  linkTo?: string;
  openLinkInNewTab?: boolean;
  start?: React.ReactNode;
  label?: React.ReactNode;
  end?: React.ReactNode;
  color?: SingleChoiceArg<
    "neutral" | "muted" | "success" | "warning" | "errorDestructive"
  >;
  type?: SingleChoiceArg<"soft" | "bordered">;
  size?: SingleChoiceArg<"extraSmall" | "small" | "large" | "extraLarge">;
  iconStart?: SingleBooleanChoiceArg<"iconStart">;
  iconEnd?: SingleBooleanChoiceArg<"iconEnd">;
  roundedFull?: SingleBooleanChoiceArg<"roundedFull">;
  flatSide?: MultiChoiceArg<"top" | "right" | "bottom" | "left">;
  className?: string;
}

const $$ = {};

function PlasmicButton__RenderFunc(props: {
  variants: PlasmicButton__VariantsArgs;
  args: PlasmicButton__ArgsType;
  overrides: PlasmicButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          linkTo: "",
          openLinkInNewTab: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "iconStart",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.iconStart
      },
      {
        path: "iconEnd",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.iconEnd
      },
      {
        path: "roundedFull",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.roundedFull
      },
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      },
      {
        path: "flatSide",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.flatSide
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [$ccVariants, setDollarCcVariants] = React.useState<
    Record<string, boolean>
  >({
    hovered: false,
    pressed: false,
    focused: false,
    focusVisible: false,
    disabled: false
  });
  const updateVariant = React.useCallback(
    (changes: Record<string, boolean>) => {
      setDollarCcVariants(prev => {
        if (!Object.keys(changes).some(k => prev[k] !== changes[k])) {
          return prev;
        }
        return { ...prev, ...changes };
      });
    },
    []
  );

  return (
    <BaseButton
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      aria-label={args.ariaLabel}
      className={classNames(
        "__wab_instance",
        "root_reset_8FchSsiiZWHae7vc9L6pbp",
        "plasmic_default_styles",
        "plasmic_mixins",
        "plasmic_tokens",
        "Button__root___8TdWu",
        {
          Button__rootcolor_errorDestructive___8TdWuie2Ak: hasVariant(
            $state,
            "color",
            "errorDestructive"
          ),
          Button__rootcolor_muted___8TdWuzri4Y: hasVariant(
            $state,
            "color",
            "muted"
          ),
          Button__rootcolor_neutral___8TdWu7TR2N: hasVariant(
            $state,
            "color",
            "neutral"
          ),
          Button__rootcolor_neutral_type_bordered___8TdWu7TR2NBTgH6:
            hasVariant($state, "color", "neutral") &&
            hasVariant($state, "type", "bordered"),
          Button__rootcolor_neutral_type_soft___8TdWu7TR2NWov7G:
            hasVariant($state, "color", "neutral") &&
            hasVariant($state, "type", "soft"),
          Button__rootcolor_success___8TdWuI1Kix: hasVariant(
            $state,
            "color",
            "success"
          ),
          Button__rootcolor_success_type_soft___8TdWuI1KixWov7G:
            hasVariant($state, "color", "success") &&
            hasVariant($state, "type", "soft"),
          Button__rootcolor_warning___8TdWukvZs6: hasVariant(
            $state,
            "color",
            "warning"
          ),
          Button__rootflatSide_bottom___8TdWuX1G1K: hasVariant(
            $state,
            "flatSide",
            "bottom"
          ),
          Button__rootflatSide_left___8TdWuyLjPi: hasVariant(
            $state,
            "flatSide",
            "left"
          ),
          Button__rootflatSide_right___8TdWu5E3Tz: hasVariant(
            $state,
            "flatSide",
            "right"
          ),
          Button__rootflatSide_top___8TdWudjmlJ: hasVariant(
            $state,
            "flatSide",
            "top"
          ),
          Button__rooticonEnd___8TdWuRkLmf: hasVariant(
            $state,
            "iconEnd",
            "iconEnd"
          ),
          Button__rooticonStart___8TdWuDOdI: hasVariant(
            $state,
            "iconStart",
            "iconStart"
          ),
          Button__rootroundedFull___8TdWuw8BJ: hasVariant(
            $state,
            "roundedFull",
            "roundedFull"
          ),
          Button__rootsize_extraLarge___8TdWuvi5UB: hasVariant(
            $state,
            "size",
            "extraLarge"
          ),
          Button__rootsize_extraSmall___8TdWuLj6S9: hasVariant(
            $state,
            "size",
            "extraSmall"
          ),
          Button__rootsize_large___8TdWuF21L: hasVariant(
            $state,
            "size",
            "large"
          ),
          Button__rootsize_small___8TdWug5RzI: hasVariant(
            $state,
            "size",
            "small"
          ),
          Button__roottype_bordered___8TdWuBTgH6: hasVariant(
            $state,
            "type",
            "bordered"
          ),
          Button__roottype_bordered_color_errorDestructive___8TdWuBTgH6Ie2Ak:
            hasVariant($state, "color", "errorDestructive") &&
            hasVariant($state, "type", "bordered"),
          Button__roottype_bordered_color_muted___8TdWuBTgH6Zri4Y:
            hasVariant($state, "color", "muted") &&
            hasVariant($state, "type", "bordered"),
          Button__roottype_bordered_color_success___8TdWuBTgH6I1Kix:
            hasVariant($state, "color", "success") &&
            hasVariant($state, "type", "bordered"),
          Button__roottype_bordered_color_warning___8TdWuBTgH6KvZs6:
            hasVariant($state, "color", "warning") &&
            hasVariant($state, "type", "bordered"),
          Button__roottype_soft___8TdWuWov7G: hasVariant(
            $state,
            "type",
            "soft"
          ),
          Button__roottype_soft_color_errorDestructive___8TdWuWov7GIe2Ak:
            hasVariant($state, "color", "errorDestructive") &&
            hasVariant($state, "type", "soft"),
          Button__roottype_soft_color_muted___8TdWuWov7GZri4Y:
            hasVariant($state, "color", "muted") &&
            hasVariant($state, "type", "soft"),
          Button__roottype_soft_color_warning___8TdWuWov7GKvZs6:
            hasVariant($state, "color", "warning") &&
            hasVariant($state, "type", "soft")
        }
      )}
      href={args.linkTo}
      isDisabled={args.disabled}
      onPress={args.onClick}
      plasmicUpdateVariant={updateVariant}
      resetsForm={args.resetsForm}
      submitsForm={args.submitsForm}
      target={(() => {
        try {
          return $props.openLinkInNewTab ? "_blank" : "_self";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
    >
      {(
        hasVariant($state, "type", "bordered") && $ccVariants["pressed"]
          ? true
          : hasVariant($state, "type", "bordered") && $ccVariants["hovered"]
          ? true
          : hasVariant($state, "type", "soft")
          ? true
          : false
      ) ? (
        <div
          data-plasmic-name={"softBackground"}
          data-plasmic-override={overrides.softBackground}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Button__softBackground__d49Tu",
            {
              Button__softBackgroundcolor_errorDestructive__d49TUie2Ak:
                hasVariant($state, "color", "errorDestructive"),
              Button__softBackgroundcolor_muted__d49TUzri4Y: hasVariant(
                $state,
                "color",
                "muted"
              ),
              Button__softBackgroundcolor_neutral__d49Tu7TR2N: hasVariant(
                $state,
                "color",
                "neutral"
              ),
              Button__softBackgroundcolor_success__d49Tui1Kix: hasVariant(
                $state,
                "color",
                "success"
              ),
              Button__softBackgroundcolor_warning__d49TUkvZs6: hasVariant(
                $state,
                "color",
                "warning"
              ),
              Button__softBackgroundroundedFull__d49TUw8BJ: hasVariant(
                $state,
                "roundedFull",
                "roundedFull"
              ),
              Button__softBackgroundsize_large__d49Tuf21L: hasVariant(
                $state,
                "size",
                "large"
              ),
              Button__softBackgroundtype_bordered__d49TubTgH6: hasVariant(
                $state,
                "type",
                "bordered"
              ),
              Button__softBackgroundtype_soft__d49Tuwov7G: hasVariant(
                $state,
                "type",
                "soft"
              )
            }
          )}
        />
      ) : null}
      {(hasVariant($state, "type", "bordered") ? true : false) ? (
        <div
          data-plasmic-name={"border"}
          data-plasmic-override={overrides.border}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Button__border___36NuR",
            {
              Button__bordercolor_errorDestructive___36NuRie2Ak: hasVariant(
                $state,
                "color",
                "errorDestructive"
              ),
              Button__bordercolor_muted___36NuRzri4Y: hasVariant(
                $state,
                "color",
                "muted"
              ),
              Button__bordercolor_neutral___36NuR7TR2N: hasVariant(
                $state,
                "color",
                "neutral"
              ),
              Button__bordercolor_success___36NuRi1Kix: hasVariant(
                $state,
                "color",
                "success"
              ),
              Button__bordercolor_warning___36NuRkvZs6: hasVariant(
                $state,
                "color",
                "warning"
              ),
              Button__borderflatSide_bottom___36NuRx1G1K: hasVariant(
                $state,
                "flatSide",
                "bottom"
              ),
              Button__borderflatSide_left___36NuRyLjPi: hasVariant(
                $state,
                "flatSide",
                "left"
              ),
              Button__borderflatSide_right___36NuR5E3Tz: hasVariant(
                $state,
                "flatSide",
                "right"
              ),
              Button__borderflatSide_top___36NuRdjmlJ: hasVariant(
                $state,
                "flatSide",
                "top"
              ),
              Button__borderroundedFull___36NuRw8BJ: hasVariant(
                $state,
                "roundedFull",
                "roundedFull"
              ),
              Button__bordersize_large___36NuRf21L: hasVariant(
                $state,
                "size",
                "large"
              ),
              Button__bordertype_bordered___36NuRbTgH6: hasVariant(
                $state,
                "type",
                "bordered"
              ),
              Button__bordertype_bordered_color_muted___36NuRbTgH6Zri4Y:
                hasVariant($state, "color", "muted") &&
                hasVariant($state, "type", "bordered"),
              Button__bordertype_soft___36NuRwov7G: hasVariant(
                $state,
                "type",
                "soft"
              )
            }
          )}
        />
      ) : null}
      <div
        data-plasmic-name={"interactionEffect"}
        data-plasmic-override={overrides.interactionEffect}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "Button__interactionEffect__qRu1V",
          {
            Button__interactionEffectcolor_errorDestructive__qRu1Vie2Ak:
              hasVariant($state, "color", "errorDestructive"),
            Button__interactionEffectcolor_muted__qRu1Vzri4Y: hasVariant(
              $state,
              "color",
              "muted"
            ),
            Button__interactionEffectcolor_neutral__qRu1V7TR2N: hasVariant(
              $state,
              "color",
              "neutral"
            ),
            Button__interactionEffectcolor_success__qRu1VI1Kix: hasVariant(
              $state,
              "color",
              "success"
            ),
            Button__interactionEffectcolor_warning__qRu1VkvZs6: hasVariant(
              $state,
              "color",
              "warning"
            ),
            Button__interactionEffectroundedFull__qRu1Vw8BJ: hasVariant(
              $state,
              "roundedFull",
              "roundedFull"
            ),
            Button__interactionEffectsize_large__qRu1VF21L: hasVariant(
              $state,
              "size",
              "large"
            ),
            Button__interactionEffectsize_small__qRu1Vg5RzI: hasVariant(
              $state,
              "size",
              "small"
            ),
            Button__interactionEffecttype_bordered__qRu1VBTgH6: hasVariant(
              $state,
              "type",
              "bordered"
            ),
            Button__interactionEffecttype_bordered_color_success__qRu1VBTgH6I1Kix:
              hasVariant($state, "color", "success") &&
              hasVariant($state, "type", "bordered"),
            Button__interactionEffecttype_soft__qRu1VWov7G: hasVariant(
              $state,
              "type",
              "soft"
            )
          }
        )}
        style={
          hasVariant($state, "type", "bordered") && $ccVariants["pressed"]
            ? { display: "block" }
            : undefined
        }
      />

      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "Button__freeBox__ovIS",
          {
            Button__freeBoxcolor_neutral__ovIS7TR2N: hasVariant(
              $state,
              "color",
              "neutral"
            ),
            Button__freeBoxroundedFull__ovISw8BJ: hasVariant(
              $state,
              "roundedFull",
              "roundedFull"
            ),
            Button__freeBoxsize_extraLarge__ovISvi5UB: hasVariant(
              $state,
              "size",
              "extraLarge"
            ),
            Button__freeBoxsize_extraSmall__ovISLj6S9: hasVariant(
              $state,
              "size",
              "extraSmall"
            ),
            Button__freeBoxsize_large__ovISF21L: hasVariant(
              $state,
              "size",
              "large"
            ),
            Button__freeBoxsize_small__ovISg5RzI: hasVariant(
              $state,
              "size",
              "small"
            ),
            Button__freeBoxtype_bordered__ovISBTgH6: hasVariant(
              $state,
              "type",
              "bordered"
            ),
            Button__freeBoxtype_bordered_color_success__ovISBTgH6I1Kix:
              hasVariant($state, "color", "success") &&
              hasVariant($state, "type", "bordered")
          }
        )}
      >
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Button__freeBox___45Cm6",
            {
              Button__freeBoxcolor_neutral___45Cm67TR2N: hasVariant(
                $state,
                "color",
                "neutral"
              ),
              Button__freeBoxcolor_neutral_type_soft___45Cm67TR2NWov7G:
                hasVariant($state, "color", "neutral") &&
                hasVariant($state, "type", "soft"),
              Button__freeBoxiconStart___45Cm6DOdI: hasVariant(
                $state,
                "iconStart",
                "iconStart"
              ),
              Button__freeBoxsize_extraLarge___45Cm6Vi5UB: hasVariant(
                $state,
                "size",
                "extraLarge"
              ),
              Button__freeBoxsize_large___45Cm6F21L: hasVariant(
                $state,
                "size",
                "large"
              ),
              Button__freeBoxsize_small___45Cm6G5RzI: hasVariant(
                $state,
                "size",
                "small"
              ),
              Button__freeBoxtype_bordered___45Cm6BTgH6: hasVariant(
                $state,
                "type",
                "bordered"
              )
            }
          )}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <CircleIcon
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__svg",
                  "Button__svg__tJvIj"
                )}
                role={"img"}
              />
            ),

            value: args.start,
            className: classNames("Button__slotTargetStart__rfoEr", {
              Button__slotTargetStartcolor_errorDestructive__rfoERie2Ak:
                hasVariant($state, "color", "errorDestructive"),
              Button__slotTargetStartcolor_muted__rfoERzri4Y: hasVariant(
                $state,
                "color",
                "muted"
              ),
              Button__slotTargetStartcolor_neutral__rfoEr7TR2N: hasVariant(
                $state,
                "color",
                "neutral"
              ),
              Button__slotTargetStartcolor_neutral_type_bordered__rfoEr7TR2NBTgH6:
                hasVariant($state, "color", "neutral") &&
                hasVariant($state, "type", "bordered"),
              Button__slotTargetStartcolor_neutral_type_soft__rfoEr7TR2NWov7G:
                hasVariant($state, "color", "neutral") &&
                hasVariant($state, "type", "soft"),
              Button__slotTargetStartcolor_success__rfoEri1Kix: hasVariant(
                $state,
                "color",
                "success"
              ),
              Button__slotTargetStartcolor_success_type_soft__rfoEri1KixWov7G:
                hasVariant($state, "color", "success") &&
                hasVariant($state, "type", "soft"),
              Button__slotTargetStartcolor_warning__rfoERkvZs6: hasVariant(
                $state,
                "color",
                "warning"
              ),
              Button__slotTargetStarticonStart__rfoErdOdI: hasVariant(
                $state,
                "iconStart",
                "iconStart"
              ),
              Button__slotTargetStartsize_extraLarge__rfoERvi5UB: hasVariant(
                $state,
                "size",
                "extraLarge"
              ),
              Button__slotTargetStartsize_extraSmall__rfoErlj6S9: hasVariant(
                $state,
                "size",
                "extraSmall"
              ),
              Button__slotTargetStartsize_large__rfoErf21L: hasVariant(
                $state,
                "size",
                "large"
              ),
              Button__slotTargetStartsize_small__rfoERg5RzI: hasVariant(
                $state,
                "size",
                "small"
              ),
              Button__slotTargetStarttype_bordered__rfoErbTgH6: hasVariant(
                $state,
                "type",
                "bordered"
              ),
              Button__slotTargetStarttype_bordered_color_errorDestructive__rfoErbTgH6Ie2Ak:
                hasVariant($state, "color", "errorDestructive") &&
                hasVariant($state, "type", "bordered"),
              Button__slotTargetStarttype_bordered_color_muted__rfoErbTgH6Zri4Y:
                hasVariant($state, "color", "muted") &&
                hasVariant($state, "type", "bordered"),
              Button__slotTargetStarttype_bordered_color_success__rfoErbTgH6I1Kix:
                hasVariant($state, "color", "success") &&
                hasVariant($state, "type", "bordered"),
              Button__slotTargetStarttype_bordered_color_warning__rfoErbTgH6KvZs6:
                hasVariant($state, "color", "warning") &&
                hasVariant($state, "type", "bordered"),
              Button__slotTargetStarttype_soft__rfoErwov7G: hasVariant(
                $state,
                "type",
                "soft"
              ),
              Button__slotTargetStarttype_soft_color_errorDestructive__rfoErwov7GIe2Ak:
                hasVariant($state, "color", "errorDestructive") &&
                hasVariant($state, "type", "soft"),
              Button__slotTargetStarttype_soft_color_muted__rfoErwov7GZri4Y:
                hasVariant($state, "color", "muted") &&
                hasVariant($state, "type", "soft"),
              Button__slotTargetStarttype_soft_color_warning__rfoErwov7GKvZs6:
                hasVariant($state, "color", "warning") &&
                hasVariant($state, "type", "soft")
            })
          })}
        </div>
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "__wab_text",
                "Button__text__kvSbV"
              )}
            >
              {"Text"}
            </div>
          ),
          value: args.label,
          className: classNames("Button__slotTargetLabel___8PLih", {
            Button__slotTargetLabelcolor_errorDestructive___8PLihie2Ak:
              hasVariant($state, "color", "errorDestructive"),
            Button__slotTargetLabelcolor_muted___8PLihzri4Y: hasVariant(
              $state,
              "color",
              "muted"
            ),
            Button__slotTargetLabelcolor_neutral___8PLih7TR2N: hasVariant(
              $state,
              "color",
              "neutral"
            ),
            Button__slotTargetLabelcolor_neutral_type_bordered___8PLih7TR2NBTgH6:
              hasVariant($state, "color", "neutral") &&
              hasVariant($state, "type", "bordered"),
            Button__slotTargetLabelcolor_neutral_type_soft___8PLih7TR2NWov7G:
              hasVariant($state, "color", "neutral") &&
              hasVariant($state, "type", "soft"),
            Button__slotTargetLabelcolor_success___8PLihI1Kix: hasVariant(
              $state,
              "color",
              "success"
            ),
            Button__slotTargetLabelcolor_success_type_soft___8PLihI1KixWov7G:
              hasVariant($state, "color", "success") &&
              hasVariant($state, "type", "soft"),
            Button__slotTargetLabelcolor_warning___8PLihkvZs6: hasVariant(
              $state,
              "color",
              "warning"
            ),
            Button__slotTargetLabeliconEnd___8PLihRkLmf: hasVariant(
              $state,
              "iconEnd",
              "iconEnd"
            ),
            Button__slotTargetLabeliconStart___8PLihDOdI: hasVariant(
              $state,
              "iconStart",
              "iconStart"
            ),
            Button__slotTargetLabelsize_extraLarge___8PLihvi5UB: hasVariant(
              $state,
              "size",
              "extraLarge"
            ),
            Button__slotTargetLabelsize_extraSmall___8PLihLj6S9: hasVariant(
              $state,
              "size",
              "extraSmall"
            ),
            Button__slotTargetLabelsize_large___8PLihF21L: hasVariant(
              $state,
              "size",
              "large"
            ),
            Button__slotTargetLabelsize_small___8PLihg5RzI: hasVariant(
              $state,
              "size",
              "small"
            ),
            Button__slotTargetLabeltype_bordered___8PLihBTgH6: hasVariant(
              $state,
              "type",
              "bordered"
            ),
            Button__slotTargetLabeltype_bordered_color_errorDestructive___8PLihBTgH6Ie2Ak:
              hasVariant($state, "color", "errorDestructive") &&
              hasVariant($state, "type", "bordered"),
            Button__slotTargetLabeltype_bordered_color_muted___8PLihBTgH6Zri4Y:
              hasVariant($state, "color", "muted") &&
              hasVariant($state, "type", "bordered"),
            Button__slotTargetLabeltype_bordered_color_success___8PLihBTgH6I1Kix:
              hasVariant($state, "color", "success") &&
              hasVariant($state, "type", "bordered"),
            Button__slotTargetLabeltype_bordered_color_warning___8PLihBTgH6KvZs6:
              hasVariant($state, "color", "warning") &&
              hasVariant($state, "type", "bordered"),
            Button__slotTargetLabeltype_soft___8PLihWov7G: hasVariant(
              $state,
              "type",
              "soft"
            ),
            Button__slotTargetLabeltype_soft_color_errorDestructive___8PLihWov7GIe2Ak:
              hasVariant($state, "color", "errorDestructive") &&
              hasVariant($state, "type", "soft"),
            Button__slotTargetLabeltype_soft_color_muted___8PLihWov7GZri4Y:
              hasVariant($state, "color", "muted") &&
              hasVariant($state, "type", "soft"),
            Button__slotTargetLabeltype_soft_color_warning___8PLihWov7GKvZs6:
              hasVariant($state, "color", "warning") &&
              hasVariant($state, "type", "soft")
          })
        })}
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "Button__freeBox__daHcD",
            {
              Button__freeBoxiconEnd__daHcDrkLmf: hasVariant(
                $state,
                "iconEnd",
                "iconEnd"
              ),
              Button__freeBoxsize_extraLarge__daHcDvi5UB: hasVariant(
                $state,
                "size",
                "extraLarge"
              ),
              Button__freeBoxsize_large__daHcDf21L: hasVariant(
                $state,
                "size",
                "large"
              ),
              Button__freeBoxsize_small__daHcDg5RzI: hasVariant(
                $state,
                "size",
                "small"
              )
            }
          )}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <ChevronDown2Icon
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__svg",
                  "Button__svg__jHqxo"
                )}
                role={"img"}
              />
            ),

            value: args.end,
            className: classNames("Button__slotTargetEnd__wzCos", {
              Button__slotTargetEndcolor_errorDestructive__wzCosie2Ak:
                hasVariant($state, "color", "errorDestructive"),
              Button__slotTargetEndcolor_muted__wzCoszri4Y: hasVariant(
                $state,
                "color",
                "muted"
              ),
              Button__slotTargetEndcolor_neutral__wzCos7TR2N: hasVariant(
                $state,
                "color",
                "neutral"
              ),
              Button__slotTargetEndcolor_neutral_type_bordered__wzCos7TR2NBTgH6:
                hasVariant($state, "color", "neutral") &&
                hasVariant($state, "type", "bordered"),
              Button__slotTargetEndcolor_neutral_type_soft__wzCos7TR2NWov7G:
                hasVariant($state, "color", "neutral") &&
                hasVariant($state, "type", "soft"),
              Button__slotTargetEndcolor_success__wzCosI1Kix: hasVariant(
                $state,
                "color",
                "success"
              ),
              Button__slotTargetEndcolor_success_type_soft__wzCosI1KixWov7G:
                hasVariant($state, "color", "success") &&
                hasVariant($state, "type", "soft"),
              Button__slotTargetEndcolor_warning__wzCoskvZs6: hasVariant(
                $state,
                "color",
                "warning"
              ),
              Button__slotTargetEndiconEnd__wzCosRkLmf: hasVariant(
                $state,
                "iconEnd",
                "iconEnd"
              ),
              Button__slotTargetEndiconStart__wzCosDOdI: hasVariant(
                $state,
                "iconStart",
                "iconStart"
              ),
              Button__slotTargetEndsize_extraLarge__wzCosvi5UB: hasVariant(
                $state,
                "size",
                "extraLarge"
              ),
              Button__slotTargetEndsize_extraSmall__wzCosLj6S9: hasVariant(
                $state,
                "size",
                "extraSmall"
              ),
              Button__slotTargetEndsize_large__wzCosF21L: hasVariant(
                $state,
                "size",
                "large"
              ),
              Button__slotTargetEndsize_small__wzCosg5RzI: hasVariant(
                $state,
                "size",
                "small"
              ),
              Button__slotTargetEndtype_bordered__wzCosBTgH6: hasVariant(
                $state,
                "type",
                "bordered"
              ),
              Button__slotTargetEndtype_bordered_color_errorDestructive__wzCosBTgH6Ie2Ak:
                hasVariant($state, "color", "errorDestructive") &&
                hasVariant($state, "type", "bordered"),
              Button__slotTargetEndtype_bordered_color_muted__wzCosBTgH6Zri4Y:
                hasVariant($state, "color", "muted") &&
                hasVariant($state, "type", "bordered"),
              Button__slotTargetEndtype_bordered_color_success__wzCosBTgH6I1Kix:
                hasVariant($state, "color", "success") &&
                hasVariant($state, "type", "bordered"),
              Button__slotTargetEndtype_bordered_color_warning__wzCosBTgH6KvZs6:
                hasVariant($state, "color", "warning") &&
                hasVariant($state, "type", "bordered"),
              Button__slotTargetEndtype_soft__wzCosWov7G: hasVariant(
                $state,
                "type",
                "soft"
              ),
              Button__slotTargetEndtype_soft_color_errorDestructive__wzCosWov7GIe2Ak:
                hasVariant($state, "color", "errorDestructive") &&
                hasVariant($state, "type", "soft"),
              Button__slotTargetEndtype_soft_color_muted__wzCosWov7GZri4Y:
                hasVariant($state, "color", "muted") &&
                hasVariant($state, "type", "soft"),
              Button__slotTargetEndtype_soft_color_warning__wzCosWov7GKvZs6:
                hasVariant($state, "color", "warning") &&
                hasVariant($state, "type", "soft")
            })
          })}
        </div>
      </Stack__>
    </BaseButton>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "softBackground", "border", "interactionEffect"],
  softBackground: ["softBackground"],
  border: ["border"],
  interactionEffect: ["interactionEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof BaseButton;
  softBackground: "div";
  border: "div";
  interactionEffect: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButton__VariantsArgs;
    args?: PlasmicButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButton__ArgProps,
          internalVariantPropNames: PlasmicButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    softBackground: makeNodeComponent("softBackground"),
    border: makeNodeComponent("border"),
    interactionEffect: makeNodeComponent("interactionEffect"),

    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
